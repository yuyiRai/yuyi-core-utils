### YamlMime:UniversalReference
items:
  - uid: yuyi-core-utils
    summary: yuyi
    name: yuyi-core-utils
    fullName: yuyi-core-utils
    langs:
      - typeScript
    type: package
    children:
      - yuyi-core-utils.App
      - yuyi-core-utils.asyncComputed
      - yuyi-core-utils.castArray
      - yuyi-core-utils.castComputed
      - yuyi-core-utils.castComputed_1
      - yuyi-core-utils.castFunction
      - yuyi-core-utils.castObjectArray
      - yuyi-core-utils.castString
      - yuyi-core-utils.CommonDto
      - yuyi-core-utils.connectTo
      - yuyi-core-utils.createCommonDto
      - yuyi-core-utils.createGroupWith
      - yuyi-core-utils.createObjectKey
      - yuyi-core-utils.createSimpleTimeBufferInput
      - yuyi-core-utils.downloadFile
      - yuyi-core-utils.EDateFormatter
      - yuyi-core-utils.EventEmitter
      - yuyi-core-utils.getDtoOrFormValue
      - yuyi-core-utils.getEventEmitter
      - yuyi-core-utils.getExpressByStr
      - yuyi-core-utils.getListDifferent
      - yuyi-core-utils.getPropByPath
      - yuyi-core-utils.getPropertyFieldByCreate
      - yuyi-core-utils.getRealLength
      - yuyi-core-utils.IOptionsUtils.Option
      - yuyi-core-utils.IPropertyUtils
      - yuyi-core-utils.isBooleanOrNumber
      - yuyi-core-utils.isEmptyArray
      - yuyi-core-utils.isEmptyArrayStrict
      - yuyi-core-utils.isEmptyData
      - yuyi-core-utils.isEmptyObject
      - yuyi-core-utils.isEmptyValue
      - yuyi-core-utils.isEqual
      - yuyi-core-utils.isEventEmitter
      - yuyi-core-utils.isNilAll
      - yuyi-core-utils.isNotEmptyArray
      - yuyi-core-utils.isNotEmptyArrayStrict
      - yuyi-core-utils.isNotEmptyData
      - yuyi-core-utils.isNotEmptyObject
      - yuyi-core-utils.isNotEmptyString
      - yuyi-core-utils.isNotEmptyValue
      - yuyi-core-utils.isNotFunction
      - yuyi-core-utils.isNotNaN
      - yuyi-core-utils.isNumber
      - yuyi-core-utils.ITypeFilterUtils
      - yuyi-core-utils.ITypeUtils
      - yuyi-core-utils.jsGetAge
      - yuyi-core-utils.logger
      - yuyi-core-utils.OptionsUtils
      - yuyi-core-utils.parseTime
      - yuyi-core-utils.pipe
      - yuyi-core-utils.reduceExtra.map
      - yuyi-core-utils.reduceExtra.map_1
      - yuyi-core-utils.simpleTimeBuffer
      - yuyi-core-utils.simpleTimeBufferInput
      - yuyi-core-utils.stubFunction
      - yuyi-core-utils.stubObjectStatic
      - yuyi-core-utils.timebuffer
      - yuyi-core-utils.toDateString
      - yuyi-core-utils.todoFilter
      - yuyi-core-utils.uuid
      - yuyi-core-utils.zipEmptyData
      - yuyi-core-utils.zipEmptyData_1
  - uid: yuyi-core-utils.App
    name: App(param1)
    fullName: App(param1)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function App(param1: App.ParamA): any;'
      return:
        type:
          - any
        description: ''
      parameters:
        - id: param1
          description: ''
          type:
            - App.ParamA
  - uid: yuyi-core-utils.asyncComputed
    name: 'asyncComputed({ type, defaultValue, watcher, time })'
    fullName: 'asyncComputed({ type, defaultValue, watcher, time })'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function asyncComputed<V = any>({ type, defaultValue, watcher, time }: AsyncComputedConfig<V>):
        PropertyDecorator;
      return:
        type:
          - PropertyDecorator
        description: '{ PropertyDecorator }'
      parameters:
        - id: '{ type, defaultValue, watcher, time }'
          description: ''
          type:
            - AsyncComputedConfig<V>
      typeParameters:
        - id: V
  - uid: yuyi-core-utils.castArray
    summary: 将一个非数组值转换为数组
    remarks: 注意，如果不允许空值（allowEmpty为false），即便输入值本身为数组也会进行过滤
    name: 'castArray(value, allowEmpty)'
    fullName: 'castArray(value, allowEmpty)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function castArray<T = any>(value: T | T[], allowEmpty?: boolean): T[];'
      return:
        type:
          - 'T[]'
        description: 由输入值转化而来的数组
      parameters:
        - id: value
          description: 输入值
          type:
            - 'T | T[]'
        - id: allowEmpty
          description: 是否允许数组成员为nil（默认为true），false时会过滤掉null或undefined
          type:
            - boolean
      typeParameters:
        - id: T
  - uid: yuyi-core-utils.castComputed
    summary: 计算用函数
    name: 'castComputed(computedFunc, computedArgs)'
    fullName: 'castComputed(computedFunc, computedArgs)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function castComputed<T, Args extends any[]>(computedFunc: Type.Function<Args, T>,
        ...computedArgs: Args): T;
      return:
        type:
          - T
        description: computedFunc(...computedArgs) -<!-- -->&gt; 计算结果
      parameters:
        - id: computedFunc
          description: 计算用函数
          type:
            - 'Type.Function<Args, T>'
        - id: computedArgs
          description: 计算用参数
          type:
            - Args
      typeParameters:
        - id: T
        - id: Args
          type:
            - 'any[]'
  - uid: yuyi-core-utils.castComputed_1
    summary: 计算用函数（同一性）
    name: 'castComputed(nativeValue, args)'
    fullName: 'castComputed(nativeValue, args)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function castComputed<T extends NotFunction>(nativeValue: T, ...args: any[]): T;'
      return:
        type:
          - T
        description: 原值返回
      parameters:
        - id: nativeValue
          description: 非函数的值
          type:
            - T
        - id: args
          description: 可以传入参数不过没用
          type:
            - 'any[]'
      typeParameters:
        - id: T
          type:
            - NotFunction
  - uid: yuyi-core-utils.castFunction
    summary: 将输入值转换为function返回
    remarks: 如果传入值
    name: castFunction(withFunction)
    fullName: castFunction(withFunction)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function castFunction<T = any>(withFunction: T): Type.Function<any[], T>;'
      return:
        type:
          - 'Type.Function<any[], T>'
        description: 输入值类型为function时直接返回输入值，其他情况返回一个function，这个function返回你的输入值
      parameters:
        - id: withFunction
          description: 输入值
          type:
            - T
      typeParameters:
        - id: T
  - uid: yuyi-core-utils.castObjectArray
    name: 'castObjectArray(objOrArr, allowEmpty)'
    fullName: 'castObjectArray(objOrArr, allowEmpty)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function castObjectArray(objOrArr: any[], allowEmpty?: boolean): any[];'
      return:
        type:
          - 'any[]'
        description: ''
      parameters:
        - id: objOrArr
          description: ''
          type:
            - 'any[]'
        - id: allowEmpty
          description: ''
          type:
            - boolean
  - uid: yuyi-core-utils.castString
    name: castString(value)
    fullName: castString(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function castString(value: any): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.connectTo
    name: 'connectTo(target, source, keyNames)'
    fullName: 'connectTo(target, source, keyNames)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function connectTo(target: any, source: any, ...keyNames: string[]): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - any
        - id: source
          description: ''
          type:
            - any
        - id: keyNames
          description: ''
          type:
            - 'string[]'
  - uid: yuyi-core-utils.createCommonDto
    name: createCommonDto(model)
    fullName: createCommonDto(model)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function createCommonDto<M extends object>(model: M): CommonDto<M>;'
      return:
        type:
          - CommonDto<M>
        description: ''
      parameters:
        - id: model
          description: ''
          type:
            - M
      typeParameters:
        - id: M
          type:
            - object
  - uid: yuyi-core-utils.createGroupWith
    summary: 根据条件将一个数组拆分为多个数组
    remarks: 更复杂的控制参照
    name: 'createGroupWith(list, keyOrWith)'
    fullName: 'createGroupWith(list, keyOrWith)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function createGroupWith<T extends object = any>(list: T[], keyOrWith: string | ((item: T) =>
        string)): IKeyValueMap<T[]>;
      return:
        type:
          - 'IKeyValueMap<T[]>'
        description: 返回一个新对象
      parameters:
        - id: list
          description: 源数组
          type:
            - 'T[]'
        - id: keyOrWith
          description: 分组关键字或方法（返回一个关键字）
          type:
            - 'string | ((item: T) => string)'
      typeParameters:
        - id: T
          description: 原数组的成员类型（必须为Object）
          type:
            - 'object '
  - uid: yuyi-core-utils.createObjectKey
    name: createObjectKey(obj)
    fullName: createObjectKey(obj)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function createObjectKey(obj: any): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: obj
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.createSimpleTimeBufferInput
    name: 'createSimpleTimeBufferInput(callback, instance, time, isDeepDiff)'
    fullName: 'createSimpleTimeBufferInput(callback, instance, time, isDeepDiff)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function createSimpleTimeBufferInput<K extends object = Window, V = any>(callback:
        CallbackFunction<V>, instance: K, time: number, isDeepDiff?: boolean): (value: V) => Promise<any>;
      return:
        type:
          - '(value: V) => Promise<any>'
        description: ''
      parameters:
        - id: callback
          description: ''
          type:
            - CallbackFunction<V>
        - id: instance
          description: ''
          type:
            - K
        - id: time
          description: ''
          type:
            - number
        - id: isDeepDiff
          description: ''
          type:
            - boolean
      typeParameters:
        - id: K
          type:
            - 'object '
        - id: V
  - uid: yuyi-core-utils.downloadFile
    summary: CustomUtils
    name: 'downloadFile(fileId, fileName)'
    fullName: 'downloadFile(fileId, fileName)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function downloadFile(fileId: string, fileName: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileId
          description: ''
          type:
            - string
        - id: fileName
          description: ''
          type:
            - string
  - uid: yuyi-core-utils.getDtoOrFormValue
    name: 'getDtoOrFormValue(key, formOrDto)'
    fullName: 'getDtoOrFormValue(key, formOrDto)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getDtoOrFormValue(key: string, formOrDto: any): any;'
      return:
        type:
          - any
        description: ''
      parameters:
        - id: key
          description: ''
          type:
            - string
        - id: formOrDto
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.getEventEmitter
    name: getEventEmitter()
    fullName: getEventEmitter()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getEventEmitter(): EventEmitter<any>;'
      return:
        type:
          - EventEmitter<any>
        description: ''
  - uid: yuyi-core-utils.getExpressByStr
    summary: 代码解释器，返回getPropertyFieldByCreate解释数组
    name: 'getExpressByStr(keyStr, defaultValue)'
    fullName: 'getExpressByStr(keyStr, defaultValue)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getExpressByStr(keyStr: string, defaultValue: any): PrototeryMatcher[];'
      return:
        type:
          - 'PrototeryMatcher[]'
        description: 二维数组  PropertyUtils
      parameters:
        - id: keyStr
          description: ''
          type:
            - string
        - id: defaultValue
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.getListDifferent
    name: 'getListDifferent(listA, listB, deep)'
    fullName: 'getListDifferent(listA, listB, deep)'
    langs:
      - typeScript
    type: function
    syntax:
      content: |-
        export declare function getListDifferent(listA: any[], listB: any[], deep?: boolean): {
            push: any[];
            pull: any[];
        };
      return:
        type:
          - |-
            {
                push: any[];
                pull: any[];
            }
        description: ''
      parameters:
        - id: listA
          description: ''
          type:
            - 'any[]'
        - id: listB
          description: ''
          type:
            - 'any[]'
        - id: deep
          description: ''
          type:
            - boolean
  - uid: yuyi-core-utils.getPropByPath
    name: 'getPropByPath(obj, path, strict)'
    fullName: 'getPropByPath(obj, path, strict)'
    langs:
      - typeScript
    type: function
    syntax:
      content: |-
        export declare function getPropByPath(obj: any, path: string, strict?: boolean): {
            o: any;
            k: string;
            v: any;
        };
      return:
        type:
          - |-
            {
                o: any;
                k: string;
                v: any;
            }
        description: ''
      parameters:
        - id: obj
          description: ''
          type:
            - any
        - id: path
          description: ''
          type:
            - string
        - id: strict
          description: ''
          type:
            - boolean
  - uid: yuyi-core-utils.getPropertyFieldByCreate
    summary: 从对象中提取成员，不存在则新建一个成员（默认为一个空对象） 提取对象逐渐深入，一个对象一次只能提取一个成员（或他的子成员的子成员）
    name: 'getPropertyFieldByCreate(main, proteryNames)'
    fullName: 'getPropertyFieldByCreate(main, proteryNames)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function getPropertyFieldByCreate<V = any>(main: IKeyValueMap, ...proteryNames:
        PrototeryMatcher[]): V;
      return:
        type:
          - V
        description: ''
      parameters:
        - id: main
          description: ''
          type:
            - IKeyValueMap
        - id: proteryNames
          description: ''
          type:
            - 'PrototeryMatcher[]'
      typeParameters:
        - id: V
  - uid: yuyi-core-utils.getRealLength
    summary: 获得字符串实际长度，中文占2，英文占1
    name: getRealLength(str)
    fullName: getRealLength(str)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function getRealLength(str: string): number;'
      return:
        type:
          - number
        description: ''
      parameters:
        - id: str
          description: ''
          type:
            - string
  - uid: yuyi-core-utils.isBooleanOrNumber
    name: isBooleanOrNumber(value)
    fullName: isBooleanOrNumber(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isBooleanOrNumber(value: any): value is (boolean | number);'
      return:
        type:
          - value is (boolean | number)
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isEmptyArray
    name: isEmptyArray(value)
    fullName: isEmptyArray(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isEmptyArray(value: any): value is boolean;'
      return:
        type:
          - value is boolean
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isEmptyArrayStrict
    name: isEmptyArrayStrict(value)
    fullName: isEmptyArrayStrict(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isEmptyArrayStrict(value: any): value is any[];'
      return:
        type:
          - 'value is any[]'
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isEmptyData
    name: isEmptyData(value)
    fullName: isEmptyData(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isEmptyData(value: any): value is any[];'
      return:
        type:
          - 'value is any[]'
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isEmptyObject
    name: 'isEmptyObject(value, checkValue)'
    fullName: 'isEmptyObject(value, checkValue)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isEmptyObject(value: any, checkValue?: boolean): value is {};'
      return:
        type:
          - 'value is {}'
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
        - id: checkValue
          description: ''
          type:
            - boolean
  - uid: yuyi-core-utils.isEmptyValue
    summary: '是否为空或异常值，不包括0 空值: null/undefined/'''' 异常值: NaN 不包括空对象/空数组'
    name: isEmptyValue(value)
    fullName: isEmptyValue(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isEmptyValue(value: any): value is (null | undefined | '''');'
      return:
        type:
          - value is (null | undefined | '')
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isEqual
    name: 'isEqual(valueA, valueB, noStrict)'
    fullName: 'isEqual(valueA, valueB, noStrict)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isEqual(valueA: any, valueB: any, noStrict?: boolean): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: valueA
          description: ''
          type:
            - any
        - id: valueB
          description: ''
          type:
            - any
        - id: noStrict
          description: ''
          type:
            - boolean
  - uid: yuyi-core-utils.isEventEmitter
    name: isEventEmitter(emitter)
    fullName: isEventEmitter(emitter)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isEventEmitter(emitter: any): emitter is EventEmitter;'
      return:
        type:
          - emitter is EventEmitter
        description: ''
      parameters:
        - id: emitter
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isNilAll
    name: isNilAll(valueArr)
    fullName: isNilAll(valueArr)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isNilAll(...valueArr: any[]): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: valueArr
          description: ''
          type:
            - 'any[]'
  - uid: yuyi-core-utils.isNotEmptyArray
    name: isNotEmptyArray(value)
    fullName: isNotEmptyArray(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isNotEmptyArray(value: any): value is any[];'
      return:
        type:
          - 'value is any[]'
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isNotEmptyArrayStrict
    name: isNotEmptyArrayStrict(value)
    fullName: isNotEmptyArrayStrict(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isNotEmptyArrayStrict(value: any): value is any[];'
      return:
        type:
          - 'value is any[]'
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isNotEmptyData
    name: isNotEmptyData(value)
    fullName: isNotEmptyData(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isNotEmptyData(value: any): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isNotEmptyObject
    name: isNotEmptyObject(value)
    fullName: isNotEmptyObject(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isNotEmptyObject(value: any): value is object;'
      return:
        type:
          - value is object
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isNotEmptyString
    summary: 判断非空字符串
    name: isNotEmptyString(str)
    fullName: isNotEmptyString(str)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isNotEmptyString(str: any): str is string;'
      return:
        type:
          - str is string
        description: ''
      parameters:
        - id: str
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isNotEmptyValue
    summary: '是否非空且非异常值，不包括0 空值: null/undefined/'''' 不包括空对象/空数组'
    name: isNotEmptyValue(value)
    fullName: isNotEmptyValue(value)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isNotEmptyValue(value: any): value is (string | number | boolean | object | Function);'
      return:
        type:
          - value is (string | number | boolean | object | Function)
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isNotFunction
    name: isNotFunction(func)
    fullName: isNotFunction(func)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isNotFunction(func: any): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: func
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isNotNaN
    name: isNotNaN(v)
    fullName: isNotNaN(v)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isNotNaN(v: any): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: v
          description: ''
          type:
            - any
  - uid: yuyi-core-utils.isNumber
    summary: >-
      Checks if value is classified as a Number primitive or object. Note: To exclude Infinity, -Infinity, and NaN,
      which are classified as numbers, use the \_.isFinite method.
    name: 'isNumber(value, allowNaN)'
    fullName: 'isNumber(value, allowNaN)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function isNumber(value: any, allowNaN?: boolean): value is number;'
      return:
        type:
          - value is number
        description: '— Returns true if value is correctly classified, else false.'
      parameters:
        - id: value
          description: ''
          type:
            - any
        - id: allowNaN
          description: ''
          type:
            - boolean
  - uid: yuyi-core-utils.jsGetAge
    summary: 比较生日和当前日期取得年龄
    name: jsGetAge(strBirthday)
    fullName: jsGetAge(strBirthday)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function jsGetAge(strBirthday: string): any;'
      return:
        type:
          - any
        description: ''
      parameters:
        - id: strBirthday
          description: ''
          type:
            - string
  - uid: yuyi-core-utils.logger
    name: 'logger(name, time)'
    fullName: 'logger(name, time)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function logger<P extends any = any>(name?: string, time?: boolean): (target: any, methodName:
        string, descriptor: PropertyDescriptor) => void;
      return:
        type:
          - '(target: any, methodName: string, descriptor: PropertyDescriptor) => void'
        description: ''
      parameters:
        - id: name
          description: ''
          type:
            - string
        - id: time
          description: ''
          type:
            - boolean
      typeParameters:
        - id: P
          type:
            - 'any '
  - uid: yuyi-core-utils.parseTime
    summary: Created by jiachenpan on 16/11/18.
    name: 'parseTime(time, cFormat)'
    fullName: 'parseTime(time, cFormat)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function parseTime(time: any, cFormat?: string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: time
          description: ''
          type:
            - any
        - id: cFormat
          description: ''
          type:
            - string
  - uid: yuyi-core-utils.pipe
    summary: 管道
    name: 'pipe(data, funcArr)'
    fullName: 'pipe(data, funcArr)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function pipe(data: any, ...funcArr: any[]): any;'
      return:
        type:
          - any
        description: ''
      parameters:
        - id: data
          description: ''
          type:
            - any
        - id: funcArr
          description: ''
          type:
            - 'any[]'
  - uid: yuyi-core-utils.reduceExtra.map
    summary: 近似\_.map，callback需返回一个Object，最后将所有返回的Object组合为一个Object
    remarks: 'see: \_.map'
    name: reduceExtra.map
    fullName: reduceExtra.map
    langs:
      - typeScript
    type: function
    syntax:
      content: |-
        function map<T, Result extends IKeyValueMap, TResult = {
                [K in keyof T]?: Result;
            }>(collection: List<T> | T[] | null | undefined, callback: ReduceMapObjectIterator<List<T> | T[] | null | undefined, Result, TResult>, accumulator?: TResult): TResult;
      return:
        type:
          - TResult
        description: ''
      parameters:
        - id: collection
          description: ''
          type:
            - 'List<T> | T[] | null | undefined'
        - id: callback
          description: ''
          type:
            - 'ReduceMapObjectIterator<List<T> | T[] | null | undefined, Result, TResult>'
        - id: accumulator
          description: ''
          type:
            - TResult
      typeParameters:
        - id: T
        - id: Result
          type:
            - IKeyValueMap
        - id: TResult
  - uid: yuyi-core-utils.reduceExtra.map_1
    remarks: 'see: \_.reduce'
    name: reduceExtra.map_1
    fullName: reduceExtra.map_1
    langs:
      - typeScript
    type: function
    syntax:
      content: |-
        function map<T extends IKeyValueMap, Result = any, TResult = {
                [K in keyof T]?: Result;
            }>(collection: T | null | undefined, callback: ReduceMapObjectIterator<T, Result, TResult>, accumulator?: TResult): TResult;
      return:
        type:
          - TResult
        description: ''
      parameters:
        - id: collection
          description: ''
          type:
            - T | null | undefined
        - id: callback
          description: ''
          type:
            - 'ReduceMapObjectIterator<T, Result, TResult>'
        - id: accumulator
          description: ''
          type:
            - TResult
      typeParameters:
        - id: T
          type:
            - IKeyValueMap
        - id: Result
        - id: TResult
  - uid: yuyi-core-utils.simpleTimeBuffer
    summary: 创建一个简单的时间缓冲Promise
    name: 'simpleTimeBuffer(time, isDeepDiff, callback, emitter)'
    fullName: 'simpleTimeBuffer(time, isDeepDiff, callback, emitter)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function simpleTimeBuffer<V = any>(time: number, isDeepDiff: boolean, callback:
        CallbackFunction<V>, emitter?: EventEmitter<V>): TimeBufferConfig<V>;
      return:
        type:
          - TimeBufferConfig<V>
        description: ''
      parameters:
        - id: time
          description: ''
          type:
            - number
        - id: isDeepDiff
          description: ''
          type:
            - boolean
        - id: callback
          description: ''
          type:
            - CallbackFunction<V>
        - id: emitter
          description: ''
          type:
            - EventEmitter<V>
      typeParameters:
        - id: V
  - uid: yuyi-core-utils.simpleTimeBufferInput
    name: 'simpleTimeBufferInput(key, value, callback, time, isDeepDiff)'
    fullName: 'simpleTimeBufferInput(key, value, callback, time, isDeepDiff)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function simpleTimeBufferInput<K extends object, V = any>(key: K, value: V, callback:
        CallbackFunction<V>, time: number, isDeepDiff?: boolean): Promise<any>;
      return:
        type:
          - Promise<any>
        description: ''
      parameters:
        - id: key
          description: ''
          type:
            - K
        - id: value
          description: ''
          type:
            - V
        - id: callback
          description: ''
          type:
            - CallbackFunction<V>
        - id: time
          description: ''
          type:
            - number
        - id: isDeepDiff
          description: ''
          type:
            - boolean
      typeParameters:
        - id: K
          type:
            - object
        - id: V
  - uid: yuyi-core-utils.stubFunction
    summary: 一个静态函数
    name: stubFunction(args)
    fullName: stubFunction(args)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function stubFunction(...args: any[]): void;'
      return:
        type:
          - void
        description: 什么都不会返回
      parameters:
        - id: args
          description: 任意参数
          type:
            - 'any[]'
  - uid: yuyi-core-utils.stubObjectStatic
    summary: 一个静态函数，返回一个对象
    name: stubObjectStatic()
    fullName: stubObjectStatic()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function stubObjectStatic(): object;'
      return:
        type:
          - object
        description: 一个静态的空对象，多次调用也永远指向同一个内存地址
  - uid: yuyi-core-utils.timebuffer
    name: 'timebuffer(time, mode)'
    fullName: 'timebuffer(time, mode)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function timebuffer(time: number, mode?: string): (target: any, methodName: string, descriptor:
        PropertyDescriptor) => void;
      return:
        type:
          - '(target: any, methodName: string, descriptor: PropertyDescriptor) => void'
        description: ''
      parameters:
        - id: time
          description: ''
          type:
            - number
        - id: mode
          description: ''
          type:
            - string
  - uid: yuyi-core-utils.toDateString
    name: 'toDateString(value, formatter)'
    fullName: 'toDateString(value, formatter)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function toDateString(value: any, formatter?: DateFormatter): Date | string;'
      return:
        type:
          - Date | string
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
        - id: formatter
          description: ''
          type:
            - DateFormatter
  - uid: yuyi-core-utils.todoFilter
    name: todoFilter(handler)
    fullName: todoFilter(handler)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function todoFilter(handler: (v: any) => boolean): FilterFunction;'
      return:
        type:
          - FilterFunction
        description: ''
      parameters:
        - id: handler
          description: ''
          type:
            - '(v: any) => boolean'
  - uid: yuyi-core-utils.uuid
    summary: 生成uuid
    name: uuid()
    fullName: uuid()
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export declare function uuid(): string;'
      return:
        type:
          - string
        description: ''
  - uid: yuyi-core-utils.zipEmptyData
    summary: 压缩数据结构，清除所有空值 对象为key-value对会删除值为空的key，如果对象为Array会挤掉空的下标，但不会影响下标顺序
    name: 'zipEmptyData(target, isRemoveRepeat)'
    fullName: 'zipEmptyData(target, isRemoveRepeat)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function zipEmptyData<T = any>(target: Array<T | undefined | null>, isRemoveRepeat?: boolean):
        T[];
      return:
        type:
          - 'T[]'
        description: ''
      parameters:
        - id: target
          description: 目标对象
          type:
            - Array<T | undefined | null>
        - id: isRemoveRepeat
          description: 是否移除重复的值（浅比较）
          type:
            - boolean
      typeParameters:
        - id: T
  - uid: yuyi-core-utils.zipEmptyData_1
    name: 'zipEmptyData(target, isRemoveRepeat)'
    fullName: 'zipEmptyData(target, isRemoveRepeat)'
    langs:
      - typeScript
    type: function
    syntax:
      content: >-
        export declare function zipEmptyData<T = any>(target: IKeyValueMap<T | undefined | null>, isRemoveRepeat?:
        boolean): IKeyValueMap<T>;
      return:
        type:
          - IKeyValueMap<T>
        description: ''
      parameters:
        - id: target
          description: ''
          type:
            - IKeyValueMap<T | undefined | null>
        - id: isRemoveRepeat
          description: ''
          type:
            - boolean
      typeParameters:
        - id: T
references:
  - uid: yuyi-core-utils.CommonDto
    name: CommonDto
  - uid: yuyi-core-utils.EDateFormatter
    name: EDateFormatter
  - uid: yuyi-core-utils.EventEmitter
    name: EventEmitter
  - uid: yuyi-core-utils.IOptionsUtils.Option
    name: IOptionsUtils.Option
  - uid: yuyi-core-utils.IPropertyUtils
    name: IPropertyUtils
  - uid: yuyi-core-utils.ITypeFilterUtils
    name: ITypeFilterUtils
  - uid: yuyi-core-utils.ITypeUtils
    name: ITypeUtils
  - uid: yuyi-core-utils.OptionsUtils
    name: OptionsUtils
